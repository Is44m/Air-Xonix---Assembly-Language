.model small
.stack 500h
.data

;MAIN MENU
msg db 'A I R    X O N I X$'
new db 'NEW GAME$'
options db 'Options$'
high_s db 'High Scores$'
info db 'Information$'
e_xit db 'Exit$'
optionsmsg db ' O P T I O N S $'
speed db ' Game Speed $'
volume db ' Sound Volume $'
music db ' Music Volume $'
control db ' Set Control $'
return db ' Return $'

;LEVEL SELECT VARIABLES
ngmsg db ' N E W  G A M E $'
select db ' Select the Game: $'
hard db ' HARD         Level 2 $'
easy db ' EASY         Level 1 $'
levelonebox db 10111111b
leveltwobox db 00110000b
lost_time_over_msg db ' S O R R Y , T I ME  O V E R !   $'

;POINTER & MAIN MENU BOXES
pointerpos db 0
boxzero db 10111111b
boxone db 00110000b
boxtwo db 00110000b
boxthree db 00110000b
boxfour db 00110000b
newcolour db 10111111b

;OPTIONS
optboxzero db 10111111b
optboxone db 00110000b
optboxtwo db 00110000b
optboxthree db 00110000b
optboxfour db 00110000b

;LOGIN VARIABLES
naam db ' Enter Your Name $'
button db ' Enter To Proceed $'
curruser db 20 DUP('$')
msg_score db ' H I G H S C O R E $'
high_score db ' Highscore:  512 $'


;Losing Screen
lost_msg db ' S O R R Y , Y O U  L O S T  T H E  G A M E !   $'

;Instructions
msg_info db ' G A M E  R U L E S $'
rule1 db ' 1. The playing field will be displayed as a grid of squares, and the',10,'      player will start in the center of the grid. $'
rule2 db ' 2. The player must cut off parts of the playing field by moving the',10,'      spaceship around the grid and drawing lines. The lines will become',10,'      walls that block the enemies and reduce the size of the playing field $'
rule3 db ' 3. As the player cuts off more of the playing field, power-ups and',10,'      bonuses will be revealed. These can include extra lives, increased',10,'      speed, or temporary invincibility. $'
rule4 db ' 4. If the player spaceship is hit by an enemy bullet or collides with',10,'      an enemy spaceship, they will lose a life. $'
rule5 db ' 5. The player must cut off at least 50% of the playing field to win.$'

msg_about db ' A B O U T   U S  $'

inform db 'GameX is a group dedicated to developing old-fashioned games with',10,'      engaging pixel graphics that evoke a sense of nostalgia and take$'
informjuggar db 'players back to their childhood. By creating games that transport',10,'      players to simpler times, GameX is able to help people relive their',10,'      fondest memories and create new ones. $'
inform2 db 'Whether you are a seasoned gamer',10,'      or just looking for a way to relax and unwind, GameX has a game that',10,'      will transport you to a simpler time and bring a smile. $'

credits db 'C R E D I T S:   $'
programming db 'Programming:                     Isaam Ansari $ '
graphic db 'Graphics:                        Mahnoor Mehmood $'
design db 'Designing:                       Amna Khan $'
key db 'P R E S S  A N Y  K E Y $'

levelsel_esc db 'Press ESC to return.$'

;SPRITES

won_msg db ' C O N G R A T U L A T I O N S  Y O U  W O N  T H E  G A M E !   $'
key_return db ' Press any key to return.  $' 

namep db ' Player Name:  Isaam$'


totposscore db ' / 1020$'

greenpxcount dw 0


var1 dd 0
var2 dd 0
diff dd 0




konay_mai_jao db 76 DUP(' '), '$'

;ENEMY AND HEART BONUS POS

e1rowpos db 16
e1colpos db 40

e1x db 1
e1y db 1
e1colour db 0009

e2rowpos db 18
e2colpos db 13

e2x db 0
e2y db 1
e2colour db 0009


;Left X limit = 18
;Right X limit = ?


enemyX dw 18                    
enemyY dw 100

enX db 1
enY db 1

enrowpos db 12
encolpos db 2
encolour db 0002

bheartrowpos db 11
bheartcolpos db 18
bonusl1collect db 0


;ENEMY AND HEART BONUS POS

rowc db 0
colc db 0

currlevel db '1'
us_score dw 0
sp_speed dw 5

digione db 0
digitwo db 0
digithree db 0



currrowpos db 22
currcolpos db 28
totcols db 56

l1lastmove db 1
wid dw 0
hgt dw 0
xStart dw 20                              
yStart dw 20
spaceshipX dw 150
spaceshipY dw 150

score_txt db 'SCORE: $'

livescount db 3

hollowheart1X dw 125
hollowheart1Y dw 10

hollowheart2X dw 150
hollowheart2Y dw 10

hollowheart3X dw 175
hollowheart3Y dw 10

bonuslifex dw 100
bonuslifey dw 100

live1x dw 125
live1y dw 10

live2x dw 150
live2y dw 10

live3x dw 175
live3y dw 10

clockX dw 225
clockY dw 8

boardX dw 20                              
boardY dw 50

obstacle3X dw 220                               
obstacle3Y dw 120

obstacle2X dw 80                               
obstacle2Y dw 130


spaceship db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0014,0000,0000,0000,0000,0000,0008,0008,0000,0000,0000,0000,0000,0014,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0008,0009,0009,0008,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0014,0000,0000,0000,0000,0008,0009,0009,0008,0000,0000,0000,0000,0014,0000
 db 0000,0000,0000,0000,0000,0000,0000,0008,0008,0009,0009,0008,0008,0000,0000,0000,0000,0000
 db 0000,0000,0000,0008,0000,0000,0008,0008,0008,0009,0009,0008,0008,0008,0000,0000,0008,0000
 db 0000,0000,0000,0008,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0008,0000
 db 0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000
 db 0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000
 db 0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000
 db 0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000
 db 0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0008,0008,0008,0008,0008,0008,0008
 db 0000,0000,0000,0008,0008,0008,0008,0008,0000,0000,0000,0000,0008,0008,0008,0008,0008,0000
 db 0000,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008
 db 0000,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008
 db 0000,0008,0008,0000,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0000,0008
 db 0000,0000,0000,0000,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0014,0000,0000
 db 0000,0000,0000,0014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0014,0000,0000

spaceshipdown 	 	  db 0000,0000,0000,0014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0014,0000,0000
	  		  db 0000,0000,0000,0000,0014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0014,0000
	  		  db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
	  		  db 0000,0000,0000,0000,0000,0000,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008
			  db 0008,0000,0000,0000,0000,0008,0000,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000
			  db 0008,0008,0000,0008,0000,0000,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000
			  db 0000,0008,0008,0008,0008,0000,0000,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000
			  db 0000,0000,0008,0008,0008,0008,0000,0000,0000,0008,0008,0008,0008,0000,0000,0000,0000
			  db 0000,0000,0008,0008,0008,0008,0000,0000,0000,0008,0008,0008,0008,0008,0008,0000,0000
			  db 0000,0000,0008,0008,0008,0008,0008,0008,0000,0000,0008,0008,0008,0008,0008,0008,0008
			  db 0000,0000,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0008,0008,0008,0008,0008
			  db 0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0008,0008,0008,0008
			  db 0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0008,0000,0000
			  db 0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0008,0000,0000,0000,0000,0008,0000
			  db 0000,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0008,0000,0000,0000,0000,0000
			  db 0000,0000,0000,0008,0008,0009,0009,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000
			  db 0014,0000,0000,0000,0008,0008,0009,0009,0008,0008,0000,0000,0000,0014,0000,0000,0000
			  db 0000,0000,0000,0000,0000,0000,0008,0009,0009,0008,0000,0000,0000,0000,0000,0000,0000
			  db 0000,0000,0014,0000,0000,0000,0000,0008,0009,0009,0008,0000,0000,0000,0000,0014,0000
			  db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0000,0000,0000,0000,0000,0000
  			  db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000


spaceshipright db 0000,0000,0000,0000,0008,0008,0008,0000,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
		    db 0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0014,0000,0014,0000,0014,0014,0000,0008
		    db 0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008
		    db 0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008
		    db 0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008
		    db 0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008
		    db 0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008
		    db 0009,0009,0009,0009,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0009,0009
		    db 0009,0009,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008
		    db 0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000
		    db 0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000
		    db 0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008
		    db 0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0014,0014,0000,0008,0008,0008,0008
		    db 0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008
		    db 0008,0008,0008,0008,0008,0000,0014,0000,0014,0000,0000,0000,0000,0000,0008,0008,0008,0000,0008,0008,0000
		    db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
		    db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
			 
	  		
	  		  
spaceshipleft db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0000,0008,0008,0008,0000,0000,0000,0000,0000,0000
		   db 0014,0000,0014,0000,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0014,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008
		   db 0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008
		   db 0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008
		   db 0000,0000,0000,0000,0000,0000,0000,0008,0008,0009,0009,0009,0009,0008,0008,0008,0008,0008,0000,0000,0000
		   db 0000,0000,0000,0000,0000,0008,0008,0009,0009,0009,0009,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000,0014,0000,0000,0014,0000,0014,0000,0008
		   db 0008,0008,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
		   db 0008,0008,0000,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
		   db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000	



obstacle1   db 0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000
		db 0000,0000,0000,0000,0000,0012,0012,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000,0000
		db 0000,0000,0012,0012,0012,0012,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000,0000,0012
		db 0012,0012,0012,0012,0012,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012
		db 0012,0012,0012,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012,0012,0012
		db 0012,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012,0012,0012,0012,0012
		db 0012,0012,0012,0000,0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012,0012,0012,0012,0012,0012
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012,0012,0012,0012,0000,0000,0000
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0012,0012,0012,0012,0000,0000,0000,0000,0000,0000
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000	

obstacle2   db 0000,0000,0000,0000,0000,0000,0000,0000
db 0000,0000,0000,0000,0000,0000,0000,0000
db 0000,0000,0000,0004,0004,0004,0000,0000
db 0000,0000,0004,0004,0004,0004,0004,0000
db 0000,0000,0004,0004,0004,0004,0004,0000
db 0000,0000,0004,0004,0004,0004,0004,0000
db 0000,0000,0000,0004,0004,0004,0000,0000
db 0000,0000,0000,0000,0000,0000,0000,0000


obstacle3   db 0000,0000,0000,0000,0000,0000,0000,0000
db 0000,0000,0000,0000,0000,0000,0000,0000
db 0000,0000,0000,0003,0003,0003,0000,0000
db 0000,0000,0003,0003,0003,0003,0003,0000
db 0000,0000,0003,0003,0003,0003,0003,0000
db 0000,0000,0003,0003,0003,0003,0003,0000
db 0000,0000,0000,0003,0003,0003,0000,0000
db 0000,0000,0000,0000,0000,0000,0000,0000


lives 	db 0000,0000,0000,0000,0000,0004,0004,0000,0000,0000,0004,0004,0000,0000,0000,0000,0000,0000,0000,0000
		db 0000,0000,0004,0012,0012,0004,0000,0004,0012,0012,0004,0000,0000,0000,0000,0000,0000,0000,0000,0004
		db 0012,0012,0012,0012,0004,0012,0012,0012,0012,0004,0000,0000,0000,0000,0000,0000,0000,0004,0012,0012
		db 0012,0012,0012,0012,0012,0012,0012,0004,0000,0000,0000,0000,0000,0000,0000,0004,0012,0012,0012,0012
		db 0012,0012,0012,0012,0012,0004,0000,0000,0000,0000,0000,0000,0000,0000,0004,0012,0012,0012,0012,0012
		db 0012,0012,0004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0012,0012,0012,0012,0012,0004
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0012,0012,0012,0004,0000,0000,0000
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0012,0004,0000,0000,0000,0000,0000,0000
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0000,0000
		db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000

hollowheart 	db 0000,0000,0000,0000,0000,0004,0004,0000,0000,0000,0004,0004,0000,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0004,0000,0000,0004,0000,0004,0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0000,0004
			db 0000,0000,0000,0000,0004,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0000
			db 0000,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000
			db 0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000,0004
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0004,0000,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0000,0004,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0004,0000,0000,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
		
clock           db 0000,0000,0000,0000,0000,0000,0000,0000,0009,0009,0009,0009,0009,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0009,0009,0000,0000,0009,0000,0000,0009,0009,0000,0000,0000,0000,0000,0000,0000
			db 0000,0009,0009,0000,0000,0000,0009,0000,0000,0000,0009,0009,0000,0000,0000,0000,0000,0000,0000,0009
			db 0000,0009,0000,0000,0009,0000,0000,0009,0000,0009,0000,0000,0000,0000,0000,0000,0009,0000,0000,0000
			db 0000,0000,0009,0000,0000,0000,0000,0000,0009,0000,0000,0000,0000,0000,0009,0000,0000,0000,0000,0000
			db 0009,0000,0000,0000,0000,0000,0009,0000,0000,0000,0000,0000,0009,0009,0009,0000,0000,0009,0009,0009
			db 0009,0009,0009,0009,0009,0000,0000,0000,0000,0000,0009,0000,0000,0000,0000,0000,0009,0000,0000,0000
			db 0000,0000,0009,0000,0000,0000,0000,0000,0009,0000,0000,0000,0000,0000,0009,0000,0000,0000,0000,0000
			db 0009,0000,0000,0000,0000,0000,0000,0009,0000,0009,0000,0000,0000,0000,0000,0009,0000,0009,0000,0000
			db 0000,0000,0000,0000,0000,0009,0009,0000,0000,0000,0009,0000,0000,0000,0009,0009,0000,0000,0000,0000
			db 0000,0000,0000,0000,0009,0009,0000,0000,0009,0000,0000,0009,0009,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0009,0009,0009,0009,0009,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
			db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000


board db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,00000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000

board2 db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,00000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,00009,00009,00009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009
db 0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0009,0002,0002,0000
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,00002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002
db 0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0002,0000
db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000

spaceship2 db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0008,0014,0008,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0008,0014,0008,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0008,0000,0000,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0008,0008,0008,0008,0008,0000,0000,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0008,0008,0005,0005,0005,0005,0005,0008,0008,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0008,0005,0005,0005,0005,0005,0005,0005,0005,0005,0008,0000,0000,0000,0000
 db 0000,0000,0000,0008,0005,0005,0005,0005,0005,0005,0005,0005,0005,0014,0005,0008,0000,0000,0000
 db 0000,0000,0008,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0008,0000,0000
 db 0000,0000,0008,0005,0005,0005,0005,0014,0005,0005,0005,0014,0005,0005,0005,0005,0008,0000,0000
 db 0000,0000,0008,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0008,0000,0000
 db 0000,0000,0008,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0008,0000,0000
 db 0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000
 db 0000,0008,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0005,0008,0000
 db 0000,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0008,0000
 db 0000,0000,0000,0000,0008,0005,0008,0000,0008,0005,0008,0000,0008,0005,0008,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0008,0000,0000,0000,0008,0000,0000,0000,0008,0000,0000,0000,0000,0000
 db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000


enemy db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
      db 0000,0000,0000,0000,0004,0000,0004,0000,0000,0000
      db 0000,0000,0000,0004,0004,0004,0004,0004,0000,0000
      db 0000,0000,0004,0004,0000,0004,0000,0004,0004,0000
      db 0000,0000,0004,0004,0004,0004,0004,0004,0004,0000,0000
      db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000
      db 0000,0000,0000,0000,0000,0000,0000,0000,0000,0000 


;;;;;;;;;;;;;;;;;;;;;;;;;;END OF SPRITES;;;;;;;;;;;;;;;;;;;;


.code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; MAIN PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

main proc
mov ax, @data
mov ds, ax

call welcome
call menu

mov ah,4ch
int 21h
main endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; WELCOME PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

welcome proc

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6
mov al,0
mov bh,1111111b
mov cl,0
mov ch,10
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 1 Turquoise
mov ah,6
mov al,0
mov bh,00111111b
mov cl,24
mov ch,14
mov dh,16
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 2 Turquoise
mov ah,6
mov al,0
mov bh,00111111b
mov cl,24
mov ch,18
mov dh,20
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H




; title
MOV AH,02
mov bh, 0
MOV DH, 5
MOV DL, 31
INT 10H

lea dx, msg
mov ah, 9
int 21h

; name
MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 31
INT 10H

lea dx, Naam
mov ah, 9
int 21h

; button
MOV AH,02
mov bh, 0
MOV DH, 19
MOV DL, 30
INT 10H

lea dx, button
mov ah, 9
int 21h


;Cursor
mov dx, 0
MOV AH,02H
mov bh, 0h
MOV DH, 15 ;Row Number
MOV DL,  32;Column Number
INT 10H


lea si, curruser
inploop:
mov ah,1
int 21h
cmp al,13
je ex_welcome
mov [si], al
inc si
jmp inploop

ex_welcome:
;lea dx, curruser
;mov ah,9
;int 21h

ret
welcome endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; MENU PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
menu proc
menulp:
; Black Block
mov ah,6 
mov al,0 
mov bh,001111b 
mov cl,0 
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6 
mov al,0 
mov bh,1111111b
mov cl,0 
mov ch,10
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 0 Turquoise
mov ah,6 
mov al,0 
mov bh, boxzero
mov cl,24 
mov ch,5
mov dh,7
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 1 Turquoise
mov ah,6 
mov al,0 
mov bh,boxone
mov cl,24
mov ch,9
mov dh,11
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 2 Turquoise
mov ah,6 
mov al,0 
mov bh,boxtwo
mov cl,24 
mov ch,13
mov dh,15
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 3 Turquoise
mov ah,6 
mov al,0 
mov bh,boxthree
mov cl,24
mov ch,17
mov dh,19
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 4 Turquoise 
mov ah,6 
mov al,0 
mov bh,boxfour
mov cl,24
mov ch,21
mov dh,23
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; title
MOV AH,02
mov bh, 0
MOV DH, 2
MOV DL, 32
INT 10H

lea dx, msg
mov ah, 9
int 21h


; new game
MOV AH,02
mov bh, 0
MOV DH, 6
MOV DL, 35
INT 10H

lea dx, new
mov ah, 9
int 21h

; Options
MOV AH,02
mov bh, 0
MOV DH, 10
MOV DL, 36
INT 10H

lea dx, Options
mov ah, 9
int 21h

; High Scores
MOV AH,02
mov bh, 0
MOV DH, 14
MOV DL, 34
INT 10H

lea dx, high_s
mov ah, 9
int 21h

; Exit
MOV AH,02
mov bh, 0
MOV DH, 18
MOV DL, 37
INT 10H

lea dx, e_xit
mov ah, 9
int 21h

; info
MOV AH,02
mov bh, 0
MOV DH, 22
MOV DL, 34
INT 10H

lea dx, info
mov ah, 9
int 21h

;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

mov ah,1
int 21h

;if the user presses the enter key/wants to select the current menu option
cmp al,13
je selected_1

;if the user presses the up key
;cmp ah, 48h
cmp al, 'w'
je pointer_up

;if the user presses the down key
;cmp ah,50h
cmp al, 's'
je pointer_down

jmp invalid_and_end

pointer_up:
;check if the pointer is pointing to the top-most box and the user wants to move up (wraps-around below)
cmp pointerpos, 0
je movup
;otherwise checks if the pointer is pointing to a box <4
cmp pointerpos, 0
ja good_1

jmp invalid_and_end
movup:
;wrap around
mov pointerpos, 4
jmp invalid_and_end

good_1:
;mov the pointer up
sub pointerpos, 1
jmp invalid_and_end


pointer_down:
;check if the pointer is pointing to the bottom-most box and the user wants to move down (wraps-around upwards)
cmp pointerpos,4
je movdown

;check if the pointer is pointing to anything above than the bottom most box
cmp pointerpos,4
jb good_2

jmp invalid_and_end

movdown:
mov pointerpos, 0
jmp invalid_and_end

jmp sk_2
selected_1:
jmp selected

sk_2:

good_2:
inc pointerpos
jmp invalid_and_end

invalid_and_end:
;00110000b colour code for blue boxes
mov boxzero, 00110000b
mov boxone, 00110000b
mov boxtwo, 00110000b
mov boxthree, 00110000b
mov boxfour, 00110000b

;checks where the pointer is at so that box's colour can be changed
;mov ah,newcolour
mov al,0
cmp pointerpos,0
je zero_zero
cmp pointerpos,1
je one_one
cmp pointerpos,2
je two_two
cmp pointerpos,3
je three_three
cmp pointerpos,4
je four_four
jmp skip_1

;moves a new colour into those box which is to be changed
zero_zero:
;start with one for blinking
mov boxzero, 10111111b
jmp skip_1

one_one:
mov boxone, 10111111b
jmp skip_1

two_two:
mov boxtwo, 10111111b
jmp skip_1

three_three:
mov boxthree, 10111111b
jmp skip_1
;10110000b normal black blink
four_four:
mov boxfour, 10111111b
jmp skip_1

selected:
;Check which menu option is currently selected and call that function
cmp pointerpos, 0
je menuopt0

cmp pointerpos, 1
je menuopt1

cmp pointerpos, 2
je menuopt2

cmp pointerpos, 3
je menuopt3

cmp pointerpos, 4
je menuopt4

jmp skip_1
menuopt0:
mov pointerpos,1
call level_select
mov pointerpos,0
;s Off
mov ah,00h
mov al,03h
int 10h
jmp skip_1

menuopt1:
mov pointerpos, 0
call optionsmenu
jmp skip_1

menuopt2:
call score
jmp skip_1

menuopt3:
ret
jmp skip_1

menuopt4:
call instructions
jmp skip_1


skip_1:

jmp menulp

menu endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; DrawPixel PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawPixel proc

mov cx, 2
drawPixO:
   push xStart
push cx
mov cx,2
drawPixI:
   push cx
mov ah,0ch
mov al,[si]
mov cx, xStart
mov dx,yStart
int 10h
pop cx
inc xStart
loop drawPixI
pop cx
pop xStart
inc yStart
loop drawPixO
ret
drawPixel endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;; Draw SpaceShip PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawspaceship proc

push bx
mov bx,spaceshipY
mov yStart, bx
mov bx,spaceshipX
mov xStart,bx
pop bx

push wid
mov wid, 19
push hgt
mov hgt, 18
mov cx,wid
mov si, offset spaceship
drawspaceshipO:
push cx
push xStart
mov cx, hgt
drawspaceshipI:
  push cx

push xStart
push yStart
  call drawPixel
pop yStart
pop xStart

pop cx
add si, 1
add xStart, 1
loop drawspaceshipI
pop xStart
pop cx
add yStart, 1
loop drawspaceshipO
pop wid
pop hgt
ret
drawspaceship endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; Level 1 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

level_1 proc
;Video Mode On
mov ah,0h
mov al,13h
int 10h
mov currlevel, '1'
call refreshboard

mov spaceshipX, 150
mov spaceshipY, 150

mov currrowpos, 22
mov currcolpos, 28

;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

mov us_score, 0
mov livescount, 3
mov bonusl1collect, 0

mov bheartrowpos, 11
mov bheartcolpos, 18
mov bonuslifex, 100
mov bonuslifey, 100

levelonemove:

cmp us_score, 510
ja basrokdo
cmp livescount, 0
je basrokdolost

mov ah, 00
int 1Ah

mov word ptr var1, dx
mov word ptr var1+2, cx

mov ax, word ptr var1
sub ax, word ptr var2
mov word ptr diff, ax
mov ax, word ptr var1+2
sbb ax, word ptr var2+2
mov word ptr diff+2, ax

mov dl, 10
mov ah, 2
int 21h

cmp word ptr diff, 1080
ja time_over

jmp nahiroko

basrokdo:

call won
ret

basrokdolost:
call lost
ret

time_over:
call lost_time_over
ret

nahiroko:

MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

MOV AH, 06H ; set clear screen function
MOV AL, 00H ; clear the screen
;;;;;;MOV BH, 07H ; set attribute (white on black)
MOV CX, 0 ; set upper left corner of screen
MOV DX, 184FH ; set lower right corner of screen
INT 10H ; call BIOS video services



MOV AH, 02H
MOV BH,0H
MOV DH, 1;Row Number
MOV DL, 2; upto 80 Column Number
INT 10H

lea dx, score_txt
mov ah, 9
int 21h

mov bx, 0
mov dx, 0
mov ax,0
mov ax, us_score
;sub ax, 280

mov bl,10
div bl

mov digione, ah

mov ah, 0
;mov bl,10
div bl
mov digitwo, ah

mov ah, 0
;mov bl,10
div bl
mov digithree, ah

;DISPLAY

mov dl, digithree
add dl,48
mov ah,2
int 21h

mov dl, digitwo
add dl,48
mov ah,2
int 21h

mov dl, digione
add dl, 48
mov ah,2
int 21h





MOV AH, 02H
MOV BH,0H
MOV DH, 23;Row Number
MOV DL, 19; upto 80 Column Number
INT 10H

mov dx, 'L'
mov ah, 2
int 21h

mov dx, 0
mov dl, currlevel
mov ah, 2
int 21h


MOV AH, 02H
MOV BH,0H
MOV DH, 0;Row Number
MOV DL, 24;Column Number
INT 10H

;call gharri

MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

call drawhollowheart1
call drawhollowheart2
call drawhollowheart3

call drawclock
call drawboard

cmp bonusl1collect, 0
jne bldrskp
call drawBonusLife 

bldrskp:
call drawobstacle3

cmp livescount, 0
je skiplivedraw
cmp livescount, 1
je onelife
cmp livescount, 2
je twolives
cmp livescount, 3
je threelives
jmp skiplivedraw

threelives:
call drawlive3

twolives:
call drawlive2

onelife:
call drawlive1

jmp skiplivedraw



skiplivedraw:

cmp l1lastmove, 1
je l1drawup

cmp l1lastmove, 2
je l1drawdown

cmp l1lastmove, 3
je l1drawleft

cmp l1lastmove, 4
je l1drawright


jmp l1drsk
l1drawup:

call drawspaceship
jmp l1drsk
l1drawdown:
call drawspaceshipdown
jmp l1drsk
l1drawleft:
call drawspaceshipleft
jmp l1drsk
l1drawright:
call drawspaceshipright
jmp l1drsk

l1drsk:

mov dx, 0
MOV AH, 02H
mov bh, 0h
MOV DH, 1 ;Row Number
MOV DL,  31;Column Number
INT 10H

mov ax, word ptr diff
mov bl, 18
div bl

mov ah, 0
mov bl, 10
div bl

mov bl, ah

mov dl, al
add dl, 48
mov ah,2
int 21h

mov dl, bl
add dl, 48
mov ah, 2
int 21h

;User Input

mov ah,1
int 21h

mov dx, sp_speed

cmp al, 'w'
je l1moveup

cmp al, 'a'
je l1moveleft

cmp al, 'd'
je l1moveright

cmp al, 's'
je l1movedown

cmp al,10
je l1skip1

cmp al, 27
je esclselect2

jmp lonemoveend

esclselect2:
ret

;currrowpos
;currcolpos
;totcols

l1moveup:
;dec livescount

cmp spaceshipY, 54
jb cantmovup
jmp canmoveup
canmoveup:
sub spaceshipY, dx
cantmovup:
mov l1lastmove, 1
call boardchanges
call bonuscheckl1
jmp lonemoveend

l1moveleft:
cmp spaceshipX, 20
ja canmoveleft
jmp cantmoveleft
canmoveleft:
sub spaceshipX, dx
cantmoveleft:
;dec livescount
mov l1lastmove, 3
call boardchanges
call bonuscheckl1
jmp lonemoveend

l1moveright:
cmp spaceshipX, 270
jb canmoveright
jmp cantmoveright

canmoveright:
add spaceshipx, dx	
cantmoveright:
mov l1lastmove, 4
call boardchanges
call bonuscheckl1
jmp lonemoveend

l1skip1:
jmp l1skip

l1movedown:
cmp spaceshipY, 145
jb downmovpos
jmp cantmovdown
downmovpos:
add spaceshipY, dx
cantmovdown:
mov l1lastmove, 2
call bonuscheckl1
call boardchanges
 
jmp lonemoveend


lonemoveend:
call obstacle1movement


jmp levelonemove

l1skip:
ret
level_1 endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; Options PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


optionsmenu proc
optmenulp:

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6
mov al,0
mov bh,1111111b
mov cl,0
mov ch,10
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 0 Turquoise
mov ah,6 
mov al,0 
mov bh, optboxzero
mov cl,24 
mov ch,5
mov dh,7
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

 ;1 Turquoiseeveleveeveve
mov ah,6 
mov al,0 
mov bh, optboxone
mov cl,24
mov ch,9
mov dh,11
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 2 Turquoise
mov ah,6 
mov al,0 
mov bh,optboxtwo
mov cl,24 
mov ch,13
mov dh,15
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 3 Turquoise
mov ah,6 
mov al,0 
mov bh,optboxthree
mov cl,24
mov ch,17
mov dh,19
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 4 Turquoise 
mov ah,6 
mov al,0 
mov bh,optboxfour
mov cl,24
mov ch,21
mov dh,23
mov dl,55
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H





MOV AH,02
mov bh, 0
MOV DH, 2
MOV DL, 32
INT 10H

lea dx, optionsmsg
mov ah, 9
int 21h

; speed  
MOV AH,02
mov bh, 0
MOV DH, 6
MOV DL, 33
INT 10H

lea dx, speed
mov ah, 9
int 21h

; volume 
MOV AH,02
mov bh, 0
MOV DH, 10
MOV DL, 32
INT 10H

lea dx, volume
mov ah, 9
int 21h

; music 
MOV AH,02
mov bh, 0
MOV DH, 14
MOV DL, 32
INT 10H

lea dx, music
mov ah, 9
int 21h

; control 
MOV AH,02
mov bh, 0
MOV DH, 18
MOV DL, 32
INT 10H

lea dx, control
mov ah, 9
int 21h

; return 
MOV AH,02
mov bh, 0
MOV DH, 22
MOV DL, 35
INT 10H

lea dx, return
mov ah, 9
int 21h


;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

mov ah,1
int 21h
cmp al,13
je optselected

cmp al,'w'
je opt_up

cmp al,'s'
je opt_down
jmp optend

opt_up:
cmp pointerpos,0
je optwrapup
dec pointerpos
jmp optend
optwrapup:
mov pointerpos,4
jmp optend


opt_down:
cmp pointerpos,4
je optwrapdown
;else if not, move pointer up
inc pointerpos
jmp optend
optwrapdown:
mov pointerpos,0
jmp optend

optselected:
cmp pointerpos,4
je optmenufour
jmp optend
optmenufour:
jmp optskip

optend:
mov optboxzero, 00110000b
mov optboxone, 00110000b
mov optboxtwo, 00110000b
mov optboxthree, 00110000b
mov optboxfour, 00110000b

mov ah, newcolour
cmp pointerpos,0
je opt_zero
cmp pointerpos,1
je opt_one
cmp pointerpos,2
je opt_two
cmp pointerpos,3
je opt_three
cmp pointerpos,4
je opt_four
jmp opt_skip_all

opt_zero:
mov optboxzero, ah
jmp opt_skip_all
opt_one:
mov optboxone, ah
jmp opt_skip_all
opt_two:
mov optboxtwo, ah
jmp opt_skip_all
opt_three:
mov optboxthree, ah
jmp opt_skip_all
opt_four:
mov optboxfour, ah
jmp opt_skip_all

opt_skip_all:

jmp optmenulp


optskip:
mov ah, newcolour
mov optboxfour, 00110000b
mov optboxzero, ah
mov pointerpos,1
ret
optionsmenu endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; Level_Select PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

level_select proc

levelslp:

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6
mov al,0
mov bh,1111111b
mov cl,0
mov ch,10
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 1 Turquoise
mov ah,6
mov al,0
mov bh, levelonebox
mov cl,24
mov ch,14
mov dh,16
mov dl,53
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 2 Turquoise
mov ah,6
mov al,0
mov bh, leveltwobox
mov cl,24
mov ch,18
mov dh,20
mov dl,53
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H




; title
MOV AH,02
mov bh, 0
MOV DH, 5
MOV DL, 31
INT 10H

lea dx, ngmsg
mov ah, 9
int 21h

; select 
MOV AH,02
mov bh,0
MOV DH, 12
MOV DL, 30
INT 10H

lea dx, select
mov ah, 9
int 21h

; easy
MOV AH,02
mov bh, 0
MOV DH, 15
MOV DL, 28
INT 10H

lea dx, easy
mov ah, 9
int 21h

; hard 
MOV AH,02
mov bh, 0
MOV DH, 19
MOV DL, 28
INT 10H

lea dx, hard
mov ah, 9
int 21h


; return
MOV AH,02
mov bh, 0
MOV DH, 22 ; row
MOV DL, 28 ; column
INT 10H

lea dx, levelsel_esc
mov ah, 9
int 21h

;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0  ;Column Number
INT 10H

mov ah,1
int 21h

cmp al, 27
je esclselect

cmp al,13
je levelselect

cmp al,'w'
je level_movup

cmp al,'s'
je level_movdown
jmp levelsend

esclselect:
ret

level_movup:
dec pointerpos
cmp pointerpos, 0
je l_up_do_none
jmp levelsend
l_up_do_none:
mov pointerpos, 1
jmp levelsend


level_movdown:
cmp pointerpos, 1
je l_down_do_none
mov pointerpos,1
l_down_do_none:
mov pointerpos,2
jmp levelsend

jmp levelsend


levelselect:
cmp pointerpos,1
je loneselected
cmp pointerpos,2
je ltwoselected

loneselected:

push dx
push cx

mov ah, 00
int 1Ah
mov word ptr var2, dx
mov word ptr var2+2, cx

pop dx
pop cx

call level_1
mov pointerpos,1
;Video Mode Off
mov ah,00h
mov al,03h
int 10h
;function for level 2 selection
jmp levelsend ;- not calling cause level 1 should be directly followed by level2
ltwoselected:
push dx
push cx

mov ah, 00
int 1Ah
mov word ptr var2, dx
mov word ptr var2+2, cx

pop dx
pop cx

call level_2
mov pointerpos,2
;Video Mode Off
mov ah,00h
mov al,03h
int 10h
jmp levelsend

levelsend:

mov levelonebox, 00110000b
mov leveltwobox, 00110000b
cmp pointerpos,1
je lsboxone
cmp pointerpos,2
je lsboxtwo

lsboxone:
mov levelonebox, 10111111b
jmp level_skip

lsboxtwo:
mov leveltwobox, 10111111b
jmp level_skip

level_skip:
jmp levelslp

ret
level_select endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW SPACESHIPDOWN DOWN PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawspaceshipdown proc
		push bx
		mov bx,spaceshipY
		mov yStart, bx
		mov bx,spaceshipX
		mov xStart,bx
		pop bx

		push wid
		mov wid, 19
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset spaceshipdown
		drawspaceshipdownO: 
			push cx
			push xStart
			mov cx, hgt
			drawspaceshipdownI:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawspaceshipdownI
			pop xStart
			pop cx
			add yStart, 1
		loop drawspaceshipdownO
		pop wid
		pop hgt
		ret
drawspaceshipdown endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW SPACESHIPDOWN LEFT PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawspaceshipleft proc
		push bx
		mov bx,spaceshipY
		mov yStart, bx
		mov bx,spaceshipX
		mov xStart,bx
		pop bx

		push wid
		mov wid, 17
		push hgt
		mov hgt, 19
		mov cx,wid
		mov si, offset spaceshipleft
		drawspaceshipleftO: 
			push cx
			push xStart
			mov cx, hgt
			drawspaceshipleftI:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawspaceshipleftI
			pop xStart
			pop cx
			add yStart, 1
		loop drawspaceshipleftO
		pop wid
		pop hgt
		ret
		drawspaceshipleft endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW SPACESHIPDOWN RIGHT PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawspaceshipright proc
		push bx
		mov bx,spaceshipY
		mov yStart, bx
		mov bx,spaceshipX
		mov xStart,bx
		pop bx

		push wid
		mov wid, 18
		push hgt
		mov hgt, 19
		mov cx,wid
		mov si, offset spaceshipright
		drawspaceshiprightO: 
			push cx
			push xStart
			mov cx, hgt
			drawspaceshiprightI:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawspaceshiprightI
			pop xStart
			pop cx
			add yStart, 1
		loop drawspaceshiprightO
		pop wid
		pop hgt
		ret
drawspaceshipright endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;  INSTRUCTIONS PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


instructions proc

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6
mov al,0
mov bh,1111111b
mov cl,0
mov ch,10                    
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 1 Turquoise
mov ah,6
mov al,0
mov bh,00110000b
mov cl,4
mov ch,5
mov dh,22
mov dl,75
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

;title
MOV AH,02
mov bh, 0
MOV DH, 2
MOV DL, 31
INT 10H

lea dx, msg_info
mov ah, 9
int 21h

; rule1
MOV AH,02
mov bh, 0
MOV DH, 6
MOV DL, 5
INT 10H

lea dx, rule1
mov ah, 9
int 21h

; rule2 
MOV AH,02
mov bh, 0
MOV DH, 9
MOV DL, 5
INT 10H

lea dx, rule2
mov ah, 9
int 21h

; rule3 
MOV AH,02
mov bh, 0
MOV DH, 13
MOV DL, 5
INT 10H

lea dx, rule3
mov ah, 9
int 21h

; rule4 
MOV AH,02
mov bh, 0
MOV DH, 17
MOV DL, 5
INT 10H

lea dx, rule4
mov ah, 9
int 21h

; rule5 
MOV AH,02
mov bh, 0
MOV DH, 20
MOV DL, 5
INT 10H

lea dx, rule5
mov ah, 9
int 21h

; key 
MOV AH,02
mov bh, 0
MOV DH, 24
MOV DL, 27
INT 10H

lea dx, key
mov ah, 9
int 21h

;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H


;user input
mov ah,1
int 21h

;;;;;;;;;;;;;;;;;;;;;;About Us Page;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6
mov al,0
mov bh,1111111b
mov cl,0
mov ch,10                    
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 1 Turquoise
mov ah,6
mov al,0
mov bh,00110000b
mov cl,4
mov ch,5
mov dh,22
mov dl,75
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 40
INT 10H

;title
MOV AH,02
mov bh, 0
MOV DH, 2
MOV DL, 32
INT 10H

lea dx, msg_about
mov ah, 9
int 21h

; info
MOV AH,02
mov bh, 0
MOV DH, 6
MOV DL, 6
INT 10H

lea dx, inform
mov ah, 9
int 21h

; info 2nd part
MOV AH,02
mov bh, 0
MOV DH, 8
MOV DL, 6
INT 10H

lea dx, informjuggar
mov ah, 9
int 21h

; info 3rd part
MOV AH,02
mov bh, 0
MOV DH, 10
MOV DL, 44
INT 10H

lea dx, inform2
mov ah, 9
int 21h



; credits
MOV AH,02
mov bh, 0
MOV DH, 14
MOV DL, 32
INT 10H

lea dx, credits
mov ah, 9
int 21h

; programming 
MOV AH,02
mov bh, 0
MOV DH, 16
MOV DL, 15
INT 10H

lea dx, programming
mov ah, 9
int 21h

; graphic 
MOV AH,02
mov bh, 0
MOV DH, 18
MOV DL, 15
INT 10H

lea dx, graphic
mov ah, 9
int 21h

; design 
MOV AH,02
mov bh, 0
MOV DH, 20
MOV DL, 15
INT 10H

lea dx,design 
mov ah, 9
int 21h

; key 
MOV AH,02
mov bh, 0
MOV DH, 24
MOV DL, 27
INT 10H

lea dx, key
mov ah, 9
int 21h

;Cursor
mov dx, 0
MOV AH,02H
mov bh, 0h
MOV DH, 15 ;Row Number
MOV DL,  32;Column Number
INT 10H

;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

mov ah,1
int 21h

ret
instructions endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; DRAW HOLLOWHEART1 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



drawhollowheart1 proc
		push bx
		mov bx,hollowheart1Y
		mov yStart, bx
		mov bx,hollowheart1X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset hollowheart
		drawhollowheartO: 
			push cx
			push xStart
			mov cx, hgt
			drawhollowheartI:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawhollowheartI
			pop xStart
			pop cx
			add yStart, 1
		loop drawhollowheartO
		pop wid
		pop hgt
		ret
drawhollowheart1 endp

;;;;;;;;;;;;;;;;END OF HOLLOWHEART1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW HOLLOWHEART2 PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



drawhollowheart2 proc
		push bx
		mov bx,hollowheart2Y
		mov yStart, bx
		mov bx,hollowheart2X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset hollowheart
		drawhollowheart2O: 
			push cx
			push xStart
			mov cx, hgt
			drawhollowheart2I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawhollowheart2I
			pop xStart
			pop cx
			add yStart, 1
		loop drawhollowheart2O
		pop wid
		pop hgt
		ret
drawhollowheart2 endp

;;;;;;;;;;;;;;;;END OF HOLLOWHEART2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW HOLLOWHEART1 PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



drawhollowheart3 proc
		push bx
		mov bx,hollowheart3Y
		mov yStart, bx
		mov bx,hollowheart3X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset hollowheart
		drawhollowheart3O: 
			push cx
			push xStart
			mov cx, hgt
			drawhollowheart3I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawhollowheart3I
			pop xStart
			pop cx
			add yStart, 1
		loop drawhollowheart3O
		pop wid
		pop hgt
		ret
drawhollowheart3 endp

;;;;;;;;;;;;;;;;END OF HOLLOWHEART3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW LIVES1 PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


drawlive1 proc
		push bx
		mov bx,live1Y
		mov yStart, bx
		mov bx,live1X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset lives
		drawlives1O: 
			push cx
			push xStart
			mov cx, hgt
			drawlives1I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawlives1I
			pop xStart
			pop cx
			add yStart, 1
		loop drawlives1O
		pop wid
		pop hgt
		ret
drawlive1 endp

;;;;;;;;;;;;;;;;;;;END OF DRAWLIVE1 PROC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW LIVES2 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


drawlive2 proc
		push bx
		mov bx,live2Y
		mov yStart, bx
		mov bx,live2X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset lives
		drawlives2O: 
			push cx
			push xStart
			mov cx, hgt
			drawlives2I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawlives2I
			pop xStart
			pop cx
			add yStart, 1
		loop drawlives2O
		pop wid
		pop hgt
		ret
drawlive2 endp

;;;;;;;;;;;;;;;;;;;END OF DRAWLIVE2 PROC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DRAW LIVES3 PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


drawlive3 proc
		push bx
		mov bx,live3Y
		mov yStart, bx
		mov bx,live3X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset lives
		drawlives3O: 
			push cx
			push xStart
			mov cx, hgt
			drawlives3I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawlives3I
			pop xStart
			pop cx
			add yStart, 1
		loop drawlives3O
		pop wid
		pop hgt
		ret
drawlive3 endp

;;;;;;;;;;;;;;;;;;;END OF DRAWLIVE3 PROC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW CLOCK PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawclock proc
		push bx
		mov bx,clockY
		mov yStart, bx
		mov bx,clockX
		mov xStart,bx
		pop bx

		push wid
		mov wid, 14
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset clock
		drawclockO: 
			push cx
			push xStart
			mov cx, hgt
			drawclockI:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawclockI
			pop xStart
			pop cx
			add yStart, 1
		loop drawclockO
		pop wid
		pop hgt
		ret
drawclock endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW BOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawboard proc

push bx
mov bx,boardY
mov yStart, bx
mov bx,boardX
mov xStart,bx
pop bx
push wid
mov wid, 25
push hgt
mov hgt, 56
mov cx,wid
mov si, offset board
drawboardO:
push cx
push xStart
mov cx, hgt
drawboardI:
  push cx

push xStart
push yStart
call drawPixel_board
pop yStart
pop xStart

pop cx
add si, 1
add xStart, 5
loop drawboardI
pop xStart
pop cx
add yStart, 5
loop drawboardO
pop wid
pop hgt
ret
drawboard endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; END OF BOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW PIXEL BOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawPixel_board proc
mov cx, 5
drawPixO_board:
   push xStart
push cx
mov cx,5
drawPixI_board:
   push cx
mov ah,0ch
mov al,[si]
mov cx, xStart
mov dx,yStart
int 10h
pop cx
add xStart, 5
loop drawPixI_board
pop cx
pop xStart
add yStart, 5
loop drawPixO_board
ret
drawPixel_board endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW END PIXEL BOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW BOARDCHANGES PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


boardchanges proc 


cmp l1lastmove, 1
je l1_up_moved
cmp l1lastmove, 2
je l1_down_moved
cmp l1lastmove, 3
je l1_left_moved
cmp l1lastmove, 4
je l1_right_moved
jmp bc_skp

;Up limit not working, down to be tested

l1_up_moved:
cmp currrowpos, 1
ja decrpos
jmp bc_skp
decrpos:
dec currrowpos
jmp bc_skp

l1_down_moved:
cmp currrowpos, 22
jb inrpos
jmp bc_skp
inrpos:
inc currrowpos
jmp bc_skp

l1_left_moved:

cmp currcolpos, 1
ja deccpos
jmp bc_skp
deccpos:
dec currcolpos
jmp bc_skp

l1_right_moved:

cmp currcolpos, 53
jb inccpos
jmp bc_skp
inccpos:
inc currcolpos
;inc currrowpos
;inc currrowpos
jmp bc_skp

bc_skp:

;Check current (updated) position of the trail and if the trail is at a border (already green), call boardshade. Else change the values and draw the trail

mov si, offset board
mov cx, 0
mov cl, currcolpos

testlp:
inc si
loop testlp

mov ax, 0
mov al, currrowpos
mul totcols
mov cx, ax

add si, cx

mov ax, [si]

cmp al, 0002
je shadekaro
cmp al, 0014
je trailcuttingself
jmp noshade

trailcuttingself:
call e1hit_trail
jmp skp_222

shadekaro:
call shadeboard
jmp skp_222

noshade:
mov cl, 0014
mov [si], cl

skp_222:

ret
boardchanges endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; END OF DRAW BOARDCHANGES PROCEDURE ;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;; SHADEBOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

shadeboard proc

mov rowc, 0
mov colc, 0

mov si, offset board
;add si, totcols
;add si, totcols
mov cx, 0

mov ax,0

shadinglp:
cmp cx, 1300
jae exshlp

noth_2:

mov ax, [si]
cmp al, 0014
jne noshnow

;check if shade left or shade right and shade accordingly - checking based on last move done 'w' 's' 'a' or 'd'

push si

cmp l1lastmove, 4
je innershadelp2
jmp innershadelp

;SHADE LEFT ONLY - CHECK CONDITION
innershadelp:
mov dh, 0
inslp:
mov ax, [si]
cmp al, 0002
je exisl


;cmp dh,0
;jne islpmiss
;cmp al,0014
;jne islpmiss
;mov al, 0002
;mov [si], al
;jmp exisl

islpmiss:
mov al, 0002
mov [si], al
inc rowc
mov dh,1
dec si
jmp inslp

;SHADE RIGHT ONLY - CHECK CONDITION
innershadelp2:
mov dh,0
inslp2:
mov ax, [si]
cmp al, 0002
je exisl

;cmp dh,0
;jne islp2miss
;cmp al,0014
;jne islp2miss
;mov al, 0002
;mov [si], al
;jmp exisl

islp2miss:
mov al, 0002
mov [si], al
inc rowc
mov dh,1
inc si
jmp inslp2

exisl:
pop si
noshnow:
inc si
inc cx
jmp shadinglp

exshlp:
cmp rowc, 0
je dontcallfunc
call scoreupdate
dontcallfunc:
ret
shadeboard endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; END OF SHADEBOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;; SCORE UPDATE PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


scoreupdate proc

;51 blue in a row
;20 blue rows
;1020 total blue pix
;72 + 51*4

mov greenpxcount, 0
mov cx, 1400

mov si, offset board
countgrpx:
cmp cx, 0
je lpskp_3
mov ax, [si]
cmp al, 0002
jne notgr
inc greenpxcount
notgr:
inc si
dec cx
jmp countgrpx

lpskp_3:
sub greenpxcount, 300

;mov ax, 0
;mov ax, greenpxcount
;mov bl, 10
;div bl
;mov bx, 100
;mul bx
mov ax, greenpxcount
mov us_score, ax

ret
scoreupdate endp 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;; END OF SCORE UPDATE PROCEDURE ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DELAY PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


delay proc

mov ah, 00
int 1Ah
mov bx, dx

jmp_delay:
int 1Ah
sub dx, bx
cmp dl, 3
jl jmp_delay

ret

delay endp

;;;;;;;;;;;;;;;;;;;;;;;;;GHARRI PROC

gharri proc
mov ah, 00
int 1Ah
mov word ptr var2, dx
mov word ptr var2+2, cx

l:

mov ax, 0003H
int 10H

mov dx, offset konay_mai_jao
mov ah, 9
int 21h


mov ah, 00
int 1Ah

mov word ptr var1, dx
mov word ptr var1+2, cx


mov ax, word ptr var1
sub ax, word ptr var2
mov word ptr diff, ax
mov ax, word ptr var1+2
sbb ax, word ptr var2+2
mov word ptr diff+2, ax

mov ax, word ptr diff
mov bl, 18
div bl

mov ah, 0

mov bl, 10
div bl

mov bl, ah

mov dl, al
add dl, 48
mov ah,2
int 21h

mov dl, bl
add dl, 48
mov ah, 2
int 21h

mov dl, 10
mov ah, 2
int 21h

cmp word ptr diff, 1080
ja exit

call delay

jmp l

exit:

ret
gharri endp




;WON PROC

won proc
;Video Mode Off
mov ah,00h
mov al,03h
int 10h

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

;won_msg 
MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 8
INT 10H

lea dx, won_msg
mov ah, 9
int 21h

; return
MOV AH,02
mov bh, 0
MOV DH, 22
MOV DL, 27
INT 10H

lea dx, levelsel_esc
mov ah, 9
int 21h


MOV AH, 02H
MOV BH,0H
MOV DH, 14;Row Number
MOV DL, 32; upto 80 Column Number
INT 10H

lea dx, score_txt
mov ah, 9
int 21h

mov bx, 0
mov dx, 0
mov ax,0
mov ax, us_score

mov bl,10
div bl

mov digione, ah

mov ah, 0
;mov bl,10
div bl
mov digitwo, ah

mov ah, 0
;mov bl,10
div bl
mov digithree, ah

;DISPLAY

mov dl, digithree
add dl,48
mov ah,2
int 21h

mov dl, digitwo
add dl,48
mov ah,2
int 21h

mov dl, digione
add dl, 48
mov ah,2
int 21h

lea dx, totposscore
mov ah,9
int 21h


;Cursor
mov dx, 0
MOV AH,02H
mov bh, 0h
MOV DH, 25 ;Row Number
MOV DL,  0;Column Number
INT 10H

namelesslp:
mov ah,1
int 21h
cmp al, 27
je exxxx2
jmp namelesslp
exxxx2:
ret
won endp

;;;;;;;;;;;;;;;;;;;DRAW BONUS HEART PROC

;bonuslifex dw 225
;bonuslifey dw 300

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; DRAW LIVES1 PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


drawBonusLife proc
		push bx
		mov bx,bonuslifey
		mov yStart, bx
		mov bx,bonuslifex
		mov xStart,bx
		pop bx

		push wid
		mov wid, 11
		push hgt
		mov hgt, 18
		mov cx,wid
		mov si, offset lives
		drawbonuslifeO: 
			push cx
			push xStart
			mov cx, hgt
			drawbonuslifeI:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawbonuslifeI
			pop xStart
			pop cx
			add yStart, 1
		loop drawbonuslifeO
		pop wid
		pop hgt
		ret
drawBonusLife endp

;;;;;;;;;;;;;;;;;;;END OF drawBonusLife PROC

;;;;;;;;;;;;DRAW OBSTACLE 3

drawobstacle3 proc
		push bx
		mov bx,obstacle3Y
		mov yStart, bx
		mov bx,obstacle3X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 8
		push hgt
		mov hgt, 8
		mov cx,wid
		mov si, offset obstacle3
		drawobstacle3O: 
			push cx
			push xStart
			mov cx, hgt
			drawobstacle3I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawobstacle3I
			pop xStart
			pop cx
			add yStart, 1
		loop drawobstacle3O
		pop wid
		pop hgt
		ret
drawobstacle3 endp
;;;;;;;;;;;END OF OBSTACLE 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; OBSTACLE1 MOVEMENT PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
obstacle1movement proc
;e1rowpos db 16
;e1colpos db 43

;obstacle3X dw 220                               
;obstacle3Y dw 120

;e1x db 1
;e1y db 1

;e1colour db 0009

cmp e1x, 1
jne e1movingleft

e1movingright:
;Move the obstacle as well as
;its position on the board right.
add obstacle3X, 5
inc e1colpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e1currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e1colour
cmp al, 0014
jne e1nottrail
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e1nottrail:
cmp al,0002
jne e1nogreen
;What to do if the px is green.
mov e1x, 0
dec e1colpos
sub obstacle3x, 5
e1nogreen:
jmp e1ymovement

e1movingleft:
;Move the obstacle as well as its 
;position on the board left.
sub obstacle3X, 5
dec e1colpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e1currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e1colour
cmp al, 0014
jne e1nottrail2
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e1nottrail2:
cmp al,0002
jne e1nogreen2
;What to do if the px is green.
mov e1x, 1
add obstacle3X, 5
inc e1colpos
e1nogreen2:
jmp e1ymovement

;Check y axis enemy movement
e1ymovement:
cmp e1y, 1
;je e1movingup
jne e1movingdown

;jmp e1movementskp

e1movingup:
;Move the obstacle as well as its 
;position on the board up.
sub obstacle3y, 5
dec e1rowpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e1currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e1colour
cmp al, 0014
jne e1nottrail3
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e1nottrail3:
cmp al,0002
jne e1nogreen3
;What to do if the px is green.
mov e1y, 0
add obstacle3y, 5
inc e1rowpos
e1nogreen3:
jmp e1movementskp

e1movingdown:
;Move the obstacle as well as its 
;position on the board down.
add obstacle3y, 5
inc e1rowpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e1currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e1colour
cmp al, 0014
jne e1nottrail4
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e1nottrail4:
cmp al,0002
jne e1nogreen4
;What to do if the px is green.
mov e1y, 1
dec e1rowpos
sub obstacle3y, 5
e1nogreen4:
jmp e1movementskp


e1movementskp:
;call movementtest
ret
obstacle1movement endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; END OF OBSTACLE1 MOVEMENT PROCEDURE ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

e1currpx proc

mov si, offset board
mov cx, 0
mov cl, e1colpos

testlp1:
inc si
loop testlp1
;add number of columns in current row to si

mov ax, 0
mov al, e1rowpos
mul totcols
mov cx, ax

;add to si number of total cols*rows above current position
add si, cx
mov ax, [si]
;al has current px colour
mov e1colour, al
ret
e1currpx endp

;;;;;;;;;;;;;;;;;;e1hit_trail PROC

e1hit_trail proc
dec livescount
mov cx, 1400
mov si, offset board
countgrpx2:
cmp cx, 0
je skp5
mov ax, [si]
cmp al, 0014
jne nottrailcol
mov dx,0
mov dl, 0009
mov [si], dl
nottrailcol:
inc si
dec cx
jmp countgrpx2
skp5:

;Trying to reset position on grid

mov currrowpos, 22
mov currcolpos, 28
mov l1lastmove, 1
mov spaceshipx, 150
mov spaceshipy, 150

ret
e1hit_trail endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; BONUSCHECKL1 PROCEDURE ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

bonuscheckl1 proc

;bheartrowpos db 12
;bheartcolpos db 47
;bonusl1collect db 0

mov al, bheartrowpos 
cmp currrowpos, al
jne bonusl1false
mov al, bheartcolpos 
cmp currcolpos, al
jne bonusl1false

cmp livescount, 3
je bonusl1false
inc livescount
mov bonusl1collect, 1

bonusl1false:
ret
bonuscheckl1 endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; LOST PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

lost proc

;Video Mode Off
mov ah,00h
mov al,03h
int 10h

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

;lost_msg 
MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 17
INT 10H

lea dx, lost_msg 
mov ah, 9
int 21h

; return
MOV AH,02
mov bh, 0
MOV DH, 22
MOV DL, 27
INT 10H

lea dx, levelsel_esc
mov ah, 9
int 21h

MOV AH, 02H
MOV BH,0H
MOV DH, 14;Row Number
MOV DL, 32; upto 80 Column Number
INT 10H

lea dx, score_txt
mov ah, 9
int 21h

mov bx, 0
mov dx, 0
mov ax,0
mov ax, us_score

mov bl,10
div bl

mov digione, ah

mov ah, 0
;mov bl,10
div bl
mov digitwo, ah

mov ah, 0
;mov bl,10
div bl
mov digithree, ah

;DISPLAY

mov dl, digithree
add dl,48
mov ah,2
int 21h

mov dl, digitwo
add dl,48
mov ah,2
int 21h

mov dl, digione
add dl, 48
mov ah,2
int 21h

lea dx, totposscore
mov ah,9
int 21h


;Cursor
mov dx, 0
MOV AH,02H
mov bh, 0h
MOV DH, 25 ;Row Number
MOV DL,  0;Column Number
INT 10H

lp32:
mov ah,1
int 21h
cmp al, 27
je ex222
jmp lp32

ex222:
ret
lost endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; END OF LOST PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; REFRESHBOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

refreshboard proc
mov di, offset board2
mov si, offset board

mov cx, 1400
rbloop:
mov dx, [di]
mov [si], dl
inc si
inc di
loop rbloop
ret
refreshboard endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; END OF REFRESHBOARD PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; LEVEL_2 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

level_2 proc
;Video Mode On
mov ah,0h
mov al,13h
int 10h

call refreshboard
mov currlevel, '2'
mov spaceshipX, 150
mov spaceshipY, 150

mov currrowpos, 22
mov currcolpos, 28

;move cursor down
MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0  ;Column Number
INT 10H

mov us_score, 0
mov livescount, 3
mov bonusl1collect, 0


mov bheartrowpos, 9
mov bheartcolpos, 26
mov bonuslifex, 140
mov bonuslifey, 85


leveltwomove:

cmp us_score, 714
ja basrokdo2
cmp livescount, 0
je basrokdolost2

mov ah, 00
int 1Ah

mov word ptr var1, dx
mov word ptr var1+2, cx

mov ax, word ptr var1
sub ax, word ptr var2
mov word ptr diff, ax
mov ax, word ptr var1+2
sbb ax, word ptr var2+2
mov word ptr diff+2, ax

mov dl, 10
mov ah, 2
int 21h

cmp word ptr diff, 720
ja time_over2


jmp nahiroko2

basrokdo2:

call won
ret

basrokdolost2:
call lost
ret

time_over2:
call lost_time_over
ret


nahiroko2:

MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

MOV AH, 06H ; set clear screen function
MOV AL, 00H ; clear the screen
MOV CX, 0 ; set upper left corner of screen
MOV DX, 184FH ; set lower right corner of screen
INT 10H ; call BIOS video services

;;;;

MOV AH, 02H
MOV BH,0H
MOV DH, 1;Row Number
MOV DL, 2; upto 80 Column Number
INT 10H

lea dx, score_txt
mov ah, 9
int 21h

mov bx, 0
mov dx, 0
mov ax,0
mov ax, us_score

mov bl,10
div bl

mov digione, ah

mov ah, 0
;mov bl,10
div bl
mov digitwo, ah

mov ah, 0
;mov bl,10
div bl
mov digithree, ah

;DISPLAY

mov dl, digithree
add dl,48
mov ah,2
int 21h

mov dl, digitwo
add dl,48
mov ah,2
int 21h

mov dl, digione
add dl, 48
mov ah,2
int 21h


MOV AH, 02H
MOV BH,0H
MOV DH, 23;Row Number
MOV DL, 19; upto 80 Column Number
INT 10H

mov dx, 'L'
mov ah, 2
int 21h

mov dx, 0
mov dl, currlevel
mov ah, 2
int 21h


MOV AH, 02H
MOV BH,0H
MOV DH, 0;Row Number
MOV DL, 24;Column Number
INT 10H


MOV AH, 02H
MOV BH,0H
MOV DH, 24 ;Row Number
MOV DL, 0;Column Number
INT 10H

call drawhollowheart1
call drawhollowheart2
call drawhollowheart3

call drawclock
call drawboard

cmp bonusl1collect, 0
jne bldrskp2
call drawBonusLife 

bldrskp2:
call drawobstacle3
call drawobstacle2
call drawenemy

cmp livescount, 0
je skiplivedraw2
cmp livescount, 1
je onelife2
cmp livescount, 2
je twolives2
cmp livescount, 3
je threelives2
jmp skiplivedraw2

threelives2:
call drawlive3

twolives2:
call drawlive2

onelife2:
call drawlive1

jmp skiplivedraw2



skiplivedraw2:

cmp l1lastmove, 1
je l2drawup

cmp l1lastmove, 2
je l2drawdown

cmp l1lastmove, 3
je l2drawleft

cmp l1lastmove, 4
je l2drawright


jmp l2drsk
l2drawup:

call drawspaceship2
jmp l2drsk

l2drawdown:
call drawspaceship2
jmp l2drsk

l2drawleft:
call drawspaceship2
jmp l2drsk

l2drawright:
call drawspaceship2
jmp l2drsk

l2drsk:

mov dx, 0
MOV AH, 02H
mov bh, 0h
MOV DH, 1 ;Row Number
MOV DL,  31;Column Number
INT 10H

mov ax, word ptr diff
mov bl, 18
div bl

mov ah, 0
mov bl, 10
div bl

mov bl, ah

mov dl, al
add dl, 48
mov ah,2
int 21h

mov dl, bl
add dl, 48
mov ah, 2
int 21h


;User Input
mov ah,1
int 21h

mov dx, sp_speed

cmp al, 'w'
je l2moveup

cmp al, 'a'
je l2moveleft

cmp al, 'd'
je l2moveright

cmp al, 's'
je l2movedown

cmp al,10
je l2skip1

cmp al, 27
je esclselect3

jmp ltwomoveend

esclselect3:
ret

;currrowpos
;currcolpos
;totcols

l2moveup:

cmp spaceshipY, 54
jb cantmovup2
jmp canmoveup2
canmoveup2:
sub spaceshipY, dx
cantmovup2:
mov l1lastmove, 1
call boardchanges
call bonuscheckl1
jmp ltwomoveend

l2moveleft:
cmp spaceshipX, 20
ja canmoveleft2
jmp cantmoveleft2
canmoveleft2:
sub spaceshipX, dx
cantmoveleft2:
mov l1lastmove, 3
call boardchanges
call bonuscheckl1
jmp ltwomoveend

l2moveright:
cmp spaceshipX, 270
jb canmoveright2
jmp cantmoveright2
canmoveright2:
add spaceshipx, dx	
cantmoveright2:
mov l1lastmove, 4
call boardchanges
call bonuscheckl1
jmp ltwomoveend

l2skip1:
jmp l2skip

l2movedown:
cmp spaceshipY, 145
jb downmovpos2
jmp cantmovdown2
downmovpos2:
add spaceshipY, dx
cantmovdown2:
mov l1lastmove, 2
call bonuscheckl1
call boardchanges
 
jmp ltwomoveend


ltwomoveend:
call obstacle1movement
call obstacle1movement
call obstacle2movement
call obstacle2movement
call enemy1movement 

jmp leveltwomove

l2skip:
ret


level_2 endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; END OF LEVEL_2 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; ENEMY MOVEMENT PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



enemy1movement proc
cmp enx, 1
jne enmovingleft


enmovingright:
;Move the obstacle as well as
;its position on the board right.
cmp encolpos, 54
ja ecolskp_1
inc encolpos
add enemyx, 5
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call encurrpx
;Compare the colour to blue colour to know whether the
;enemy is outside the shaded area
mov al, encolour
cmp al,0002
je ennoblue

cmp al, 0014
jne lifenotlost
dec livescount

lifenotlost:
;What to do if the px is blue.
dec encolpos
sub enemyx, 5
ecolskp_1:
mov enx, 0
ennoblue:

jmp enymovement

enmovingleft:
;Move the obstacle as well as
;its position on the board right.
cmp encolpos, 0
je encolskp_2
dec encolpos
sub enemyx, 5
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call encurrpx
;Compare the colour to blue colour to know whether the
;enemy is outside the shaded area
mov al, encolour
cmp al,0002
je ennoblue2

cmp al, 0014
jne lifenotlost2
dec livescount

lifenotlost2:
;What to do if the px is blue.
inc encolpos
add enemyx, 5
encolskp_2:
mov eny, 1
ennoblue2:
jmp enymovement

;Check y axis enemy movement
enymovement:
cmp eny, 1
jne enmovingdown

enmovingup:
;Move the obstacle as well as
;its position on the board up.

cmp enrowpos, 0
je enrowskp_2
dec enrowpos
sub enemyy, 5
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call encurrpx
;Compare the colour to blue colour to know whether the
;enemy is outside the shaded area
mov al, encolour
cmp al,0002
je ennoblue3

cmp al, 0014
jne lifenotlost3
dec livescount

lifenotlost3:
;What to do if the px is blue.
inc enrowpos
add enemyy, 5
enrowskp_2:
mov eny, 0
ennoblue3:
jmp enmovementskp

enmovingdown:
;Move the obstacle as well as
;its position on the board down.

cmp enrowpos, 23
je enrowskp_3
inc enrowpos
add enemyy, 5
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call encurrpx
;Compare the colour to blue colour to know whether the
;enemy is outside the shaded area
mov al, encolour
cmp al,0002
je ennoblue4

cmp al, 0014
jne lifenotlost4
dec livescount

lifenotlost4:
;What to do if the px is blue.
dec enrowpos
sub enemyy, 5
enrowskp_3:
mov eny, 1
ennoblue4:
jmp enmovementskp


enmovementskp:
;call movementtest2
ret
enemy1movement endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; END OF ENEMY MOVEMENT PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;; lost_time_over PROCEDURE ;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

lost_time_over proc

;Video Mode Off
mov ah,00h
mov al,03h
int 10h

; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

;lost_msg
MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 24
INT 10H

lea dx, lost_time_over_msg
mov ah, 9
int 21h

; return
MOV AH,02
mov bh, 0
MOV DH, 22
MOV DL, 27
INT 10H

lea dx, levelsel_esc
mov ah, 9
int 21h

MOV AH, 02H
MOV BH,0H
MOV DH, 14;Row Number
MOV DL, 32; upto 80 Column Number
INT 10H

lea dx, score_txt
mov ah, 9
int 21h

mov bx, 0
mov dx, 0
mov ax,0
mov ax, us_score

mov bl,10
div bl

mov digione, ah

mov ah, 0
;mov bl,10
div bl
mov digitwo, ah

mov ah, 0
;mov bl,10
div bl
mov digithree, ah

;DISPLAY

mov dl, digithree
add dl,48
mov ah,2
int 21h

mov dl, digitwo
add dl,48
mov ah,2
int 21h

mov dl, digione
add dl, 48
mov ah,2
int 21h

lea dx, totposscore
mov ah,9
int 21h


;Cursor
mov dx, 0
MOV AH,02H
mov bh, 0h
MOV DH, 25 ;Row Number
MOV DL,  0;Column Number
INT 10H

namelesslp22:
mov ah,1
int 21h
cmp al, 27
je exx222
jmp namelesslp22
exx222:
ret
lost_time_over endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; END OF LOST TIME OVER PROCEDURE ;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; DRAW SPACESHIP2 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawspaceship2 proc
push bx
mov bx,spaceshipY
mov yStart, bx
mov bx,spaceshipX
mov xStart,bx
pop bx

push wid
mov wid, 19
push hgt
mov hgt, 19
mov cx,wid
mov si, offset spaceship2
drawspaceshipO_2:
push cx
push xStart
mov cx, hgt
drawspaceshipI_2:
  push cx

push xStart
push yStart
  call drawPixel
pop yStart
pop xStart

pop cx
add si, 1
add xStart, 1
loop drawspaceshipI_2
pop xStart
pop cx
add yStart, 1
loop drawspaceshipO_2
pop wid
pop hgt
ret
drawspaceship2 endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;; END OF DRAWSPACESHIP2 PROCEDURE ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; DRAWOBSTACLE2 PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawobstacle2 proc
		push bx
		mov bx,obstacle2Y
		mov yStart, bx
		mov bx,obstacle2X
		mov xStart,bx
		pop bx

		push wid
		mov wid, 8
		push hgt
		mov hgt, 8
		mov cx,wid
		mov si, offset obstacle2
		drawobstacle2O: 
			push cx
			push xStart
			mov cx, hgt
			drawobstacle2I:
			   	push cx

				push xStart
				push yStart
  				call drawPixel
				pop yStart
				pop xStart

				pop cx
				add si, 1
				add xStart, 1
				loop drawobstacle2I
			pop xStart
			pop cx
			add yStart, 1
		loop drawobstacle2O
		pop wid
		pop hgt
		ret
drawobstacle2 endp


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; END OF DRAWOBSTACLE2 PROCEDURE ;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;; OBSTACLE2 MOVEMENT PROCEDURE ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



obstacle2movement proc

cmp e2x, 1
jne e2movingleft

e2movingright:
;Move the obstacle as well as
;its position on the board right.
add obstacle2x, 5
inc e2colpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e2currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e2colour
cmp al, 0014
jne e2nottrail
;Calls e2hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e2nottrail:
cmp al,0002
jne e2nogreen
;What to do if the px is green.
mov e2x, 0
dec e2colpos
sub obstacle2x, 5
e2nogreen:
jmp e2ymovement

e2movingleft:
;Move the obstacle as well as its 
;position on the board left.
sub obstacle2x, 5
dec e2colpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e2currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e2colour
cmp al, 0014
jne e2nottrail2
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e2nottrail2:
cmp al,0002
jne e2nogreen2
;What to do if the px is green.
mov e2x, 1
add obstacle2x, 5
inc e2colpos
e2nogreen2:
jmp e2ymovement

;Check y axis enemy movement
e2ymovement:
cmp e2y, 1
;je e1movingup
jne e2movingdown

;jmp e2movementskp

e2movingup:
;Move the obstacle as well as its 
;position on the board up.
sub obstacle2y, 5
dec e2rowpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e2currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e2colour
cmp al, 0014
jne e2nottrail3
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e2nottrail3:
cmp al,0002
jne e2nogreen3
;What to do if the px is green.
mov e2y, 0
add obstacle2y, 5
inc e2rowpos
e2nogreen3:
jmp e2movementskp

e2movingdown:
;Move the obstacle as well as its 
;position on the board down.
add obstacle2y, 5
inc e2rowpos
;Find out the colour of the current pixel
;at the position of the obstacle on the board.
call e2currpx
;Compare the colour to the trail's colour to know whether the
;trail has been cut.
mov al, e2colour
cmp al, 0014
jne e2nottrail4
;Calls e1hit_trail proc if it recognizes that
;the trail has been hit. Deducts a life & removes trail
;from screen.
call e1hit_trail
e2nottrail4:
cmp al,0002
jne e2nogreen4
;What to do if the px is green.
mov e2y, 1
dec e2rowpos
sub obstacle2y, 5
e2nogreen4:
jmp e2movementskp


e2movementskp:
;call movementtest2
ret
obstacle2movement endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; END OF OBSTACLE2 MOVEMENT PROCEDURE ;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;; E2CURRPX PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


e2currpx proc

mov si, offset board
mov cx, 0
mov cl, e2colpos

testlp2:
inc si
loop testlp2
;add number of columns in current row to si

mov ax, 0
mov al, e2rowpos
mul totcols
mov cx, ax

;add to si number of total cols*rows above current position
add si, cx
mov ax, [si]
;al has current px colour
mov e2colour, al
ret
e2currpx endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; END OF E2CURRPX PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;; DRAWENEMY PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

drawenemy proc
push bx
mov bx,enemyY
mov yStart, bx
mov bx,enemyX
mov xStart,bx
pop bx

push wid
mov wid, 6
push hgt
mov hgt, 10
mov cx,wid
mov si, offset enemy
drawenemyO:
push cx
push xStart
mov cx, hgt
drawenemyI:
  push cx

push xStart
push yStart
  call drawPixel
pop yStart
pop xStart

pop cx
add si, 1
add xStart, 1
loop drawenemyI
pop xStart
pop cx
add yStart, 1
loop drawenemyO
pop wid
pop hgt
ret
drawenemy endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; END OF DRAWENEMY PROCEDURE ;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;; encurrpx PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


encurrpx proc
mov si, offset board
mov cx, 0
mov cl, encolpos

testlp5:
inc si
loop testlp5
;add number of columns in current row to si

mov ax, 0
mov al, enrowpos
mul totcols
mov cx, ax

;add to si number of total cols*rows above current position
add si, cx
mov ax, [si]
;al has current px colour
mov encolour, al
ret
encurrpx endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;; END OF ENCURRPX PROCEDURE ;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

score proc



; Black Block
mov ah,6
mov al,0
mov bh,001111b
mov cl,0
mov ch,0
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 12
MOV DL, 34
INT 10H

; Grey Block
mov ah,6
mov al,0
mov bh,1111111b
mov cl,0
mov ch,10
mov dh,90
mov dl,90
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H



; 1 Turquoise
mov ah,6
mov al,0
mov bh,00110000b
mov cl,24
mov ch,13
mov dh,15
mov dl,54
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 2 Turquoise
mov ah,6
mov al,0
mov bh,00110000b
mov cl,24
mov ch,17
mov dh,19
mov dl,54
int 10h

MOV AH,02
mov bh, 0
MOV DH, 3
MOV DL, 34
INT 10H

; 3 Turquoise
;mov ah,6
;mov al,0
;mov bh,00110000b
;mov cl,24
;mov ch,21
;mov dh,23
;mov dl,54
;int 10h

;MOV AH,02
;mov bh, 0
;MOV DH, 3
;MOV DL, 34
;INT 10H



;title

MOV AH,02
mov bh, 0
MOV DH, 5
MOV DL, 32
INT 10H

lea dx, msg_score
mov ah, 9
int 21h


;highscore
MOV AH,02
mov bh, 0
MOV DH, 14
MOV DL, 29
INT 10H

lea dx, high_score
mov ah, 9
int 21h

; name
MOV AH,02
mov bh, 0
MOV DH, 18
MOV DL, 29
INT 10H

lea dx, namep
mov ah, 9
int 21h

; return
MOV AH,02
mov bh, 0
MOV DH, 22
MOV DL, 27
INT 10H

lea dx, key_return
mov ah, 9
int 21h

;Cursor
mov dx, 0
MOV AH,02H
mov bh, 0h
MOV DH, 30 ;Row Number
MOV DL,  32;Column Number
INT 10H

mov ah,1
int 21h

ret
score endp



end main
